import*as t from"fs";import*as s from"path";export default class LocalStorage{constructor(r,i=!1){if(this.isAsync=i,this.store_prefix=s.join(process.cwd(),r),this.isAsync)(async()=>{try{if(!(await t.promises.stat(this.store_prefix)).isDirectory())throw new Error(`${this.store_prefix} is not a directory! Remove it or rename it to create the localStorage object!`)}catch(s){if("ENOENT"!==s.code)throw s;console.log("Creating localStorage database."),await t.promises.mkdir(this.store_prefix,{recursive:!0})}})();else try{if(!t.statSync(this.store_prefix).isDirectory())throw new Error(`${this.store_prefix} is not a directory! Remove it or rename it to create the localStorage object!`)}catch(s){if("ENOENT"!==s.code)throw s;console.log("Creating localStorage database."),t.mkdirSync(this.store_prefix,{recursive:!0})}}clear(){if(this.isAsync)(async()=>{const clearDirectory=async r=>{const i=await t.promises.readdir(r);for(const e of i){const i=s.join(r,e);(await t.promises.stat(i)).isDirectory()?(await clearDirectory(i),await t.promises.rmdir(i)):await t.promises.unlink(i)}};try{await t.promises.access(this.store_prefix),await clearDirectory(this.store_prefix)}catch(t){if("ENOENT"!==t.code)throw t}})();else{const clearDirectorySync=r=>{const i=t.readdirSync(r);for(const e of i){const i=s.join(r,e);t.statSync(i).isDirectory()?(clearDirectorySync(i),t.rmdirSync(i)):t.unlinkSync(i)}};t.existsSync(this.store_prefix)&&clearDirectorySync(this.store_prefix)}}removeItem(r){const i=s.join(this.store_prefix,r);this.isAsync?(async()=>{try{await t.promises.access(i),await t.promises.unlink(i)}catch(t){if("ENOENT"!==t.code)throw t}})():t.existsSync(i)&&t.unlinkSync(i)}setItem(r,i){const e=s.join(this.store_prefix,r);if(this.isAsync)return t.promises.writeFile(e,i,"utf8");t.writeFileSync(e,i,"utf8")}getItem(r){const i=s.join(this.store_prefix,r);if(this.isAsync)return(async()=>{try{return await t.promises.access(i),await t.promises.readFile(i,"utf8")}catch(t){if("ENOENT"===t.code)return null;throw t}})();try{return t.readFileSync(i,"utf8")}catch(t){if("ENOENT"===t.code)return null;throw t}}get length(){let r=0;const walkAsync=async i=>{const e=await t.promises.readdir(i);for(const o of e){const e=s.join(i,o);(await t.promises.stat(e)).isDirectory()?await walkAsync(e):r++}},walkSync=i=>{const e=t.readdirSync(i);for(const o of e){const e=s.join(i,o);t.statSync(e).isDirectory()?walkSync(e):r++}};return this.isAsync?(async()=>(await walkAsync(this.store_prefix),r))():(walkSync(this.store_prefix),r)}}