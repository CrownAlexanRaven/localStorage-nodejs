import*as t from"fs";import*as e from"path";export default class i{constructor(i,r=!1){if(this.isAsync=r,this.store_prefix=e.join(process.cwd(),i),this.isAsync)(async()=>{try{let e=await t.promises.stat(this.store_prefix);if(!e.isDirectory())throw Error(`${this.store_prefix} is not a directory! Remove it or rename it to create the localStorage object!`)}catch(i){if("ENOENT"===i.code)await t.promises.mkdir(this.store_prefix,{recursive:!0});else throw i}})();else try{let s=t.statSync(this.store_prefix);if(!s.isDirectory())throw Error(`${this.store_prefix} is not a directory! Remove it or rename it to create the localStorage object!`)}catch(o){if("ENOENT"===o.code)console.log("Creating localStorage database."),t.mkdirSync(this.store_prefix,{recursive:!0});else throw o}}clear(){if(this.isAsync)(async()=>{let i=async r=>{let s=await t.promises.readdir(r);for(let o of s){let a=e.join(r,o),c=await t.promises.stat(a);c.isDirectory()?(await i(a),await t.promises.rmdir(a)):await t.promises.unlink(a)}};try{await t.promises.access(this.store_prefix),await i(this.store_prefix)}catch(r){if("ENOENT"!==r.code)throw r}})();else{let i=r=>{let s=t.readdirSync(r);for(let o of s){let a=e.join(r,o),c=t.statSync(a);c.isDirectory()?(i(a),t.rmdirSync(a)):t.unlinkSync(a)}};t.existsSync(this.store_prefix)&&i(this.store_prefix)}}removeItem(i){let r=e.join(this.store_prefix,i);this.isAsync?(async()=>{try{await t.promises.access(r),await t.promises.unlink(r)}catch(e){if("ENOENT"!==e.code)throw e}})():t.existsSync(r)&&t.unlinkSync(r)}setItem(i,r){let s=e.join(this.store_prefix,i);if(this.isAsync)return t.promises.writeFile(s,r,"utf8");t.writeFileSync(s,r,"utf8")}getItem(i){let r=e.join(this.store_prefix,i);if(this.isAsync)return(async()=>{try{return await t.promises.access(r),await t.promises.readFile(r,"utf8")}catch(e){if("ENOENT"===e.code)return null;throw e}})();try{return t.readFileSync(r,"utf8")}catch(s){if("ENOENT"===s.code)return null;throw s}}get length(){let i=0,r=async s=>{let o=await t.promises.readdir(s);for(let a of o){let c=e.join(s,a),n=await t.promises.stat(c);n.isDirectory()?await r(c):i++}},s=r=>{let o=t.readdirSync(r);for(let a of o){let c=e.join(r,a);t.statSync(c).isDirectory()?s(c):i++}};return this.isAsync?(async()=>(await r(this.store_prefix),i))():(s(this.store_prefix),i)}};