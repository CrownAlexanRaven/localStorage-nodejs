const fs=require("fs"),path=require("path");module.exports=class{constructor(s,t=!1){if(this.isAsync=t,this.store_prefix=path.join(process.cwd(),s),this.isAsync)(async()=>{try{if(!(await fs.promises.stat(this.store_prefix)).isDirectory())throw new Error(`${this.store_prefix} is not a directory! Remove it or rename it to create the localStorage object!`)}catch(s){if("ENOENT"!==s.code)throw s;console.log("Creating localStorage database."),await fs.promises.mkdir(this.store_prefix,{recursive:!0})}})();else try{if(!fs.statSync(this.store_prefix).isDirectory())throw new Error(`${this.store_prefix} is not a directory! Remove it or rename it to create the localStorage object!`)}catch(s){if("ENOENT"!==s.code)throw s;console.log("Creating localStorage database."),fs.mkdirSync(this.store_prefix,{recursive:!0})}}clear(){if(this.isAsync)(async()=>{const clearDirectory=async s=>{const t=await fs.promises.readdir(s);for(const r of t){const t=path.join(s,r);(await fs.promises.stat(t)).isDirectory()?(await clearDirectory(t),await fs.promises.rmdir(t)):await fs.promises.unlink(t)}};try{await fs.promises.access(this.store_prefix),await clearDirectory(this.store_prefix)}catch(s){if("ENOENT"!==s.code)throw s}})();else{const clearDirectorySync=s=>{const t=fs.readdirSync(s);for(const r of t){const t=path.join(s,r);fs.statSync(t).isDirectory()?(clearDirectorySync(t),fs.rmdirSync(t)):fs.unlinkSync(t)}};fs.existsSync(this.store_prefix)&&clearDirectorySync(this.store_prefix)}}removeItem(s){const t=path.join(this.store_prefix,s);this.isAsync?(async()=>{try{await fs.promises.access(t),await fs.promises.unlink(t)}catch(s){if("ENOENT"!==s.code)throw s}})():fs.existsSync(t)&&fs.unlinkSync(t)}setItem(s,t){const r=path.join(this.store_prefix,s);if(this.isAsync)return fs.promises.writeFile(r,t,"utf8");fs.writeFileSync(r,t,"utf8")}getItem(s){const t=path.join(this.store_prefix,s);if(this.isAsync)return(async()=>{try{return await fs.promises.access(t),await fs.promises.readFile(t,"utf8")}catch(s){if("ENOENT"===s.code)return null;throw s}})();try{return fs.readFileSync(t,"utf8")}catch(s){if("ENOENT"===s.code)return null;throw s}}get length(){let s=0;const walkAsync=async t=>{const r=await fs.promises.readdir(t);for(const i of r){const r=path.join(t,i);(await fs.promises.stat(r)).isDirectory()?await walkAsync(r):s++}},walkSync=t=>{const r=fs.readdirSync(t);for(const i of r){const r=path.join(t,i);fs.statSync(r).isDirectory()?walkSync(r):s++}};return this.isAsync?(async()=>(await walkAsync(this.store_prefix),s))():(walkSync(this.store_prefix),s)}};